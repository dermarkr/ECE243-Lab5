
D:/ECE243_Computer_Organization/Labs/Lab_5/Part3/part3.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
			.text			// executable code follows
			.global _start
_start:
			MOV		R6, #0			//Number to display				
   0:	e3a06000 	mov	r6, #0
			LDR		R10, =0xFF200050
   4:	e59fa0fc 	ldr	r10, [pc, #252]	; 108 <BIT_CODES+0x10>

00000008 <PRELOOP>:

PRELOOP:	LDRB	R3, [R10, #12]
   8:	e5da300c 	ldrb	r3, [r10, #12]
			MOV		R3, #15
   c:	e3a0300f 	mov	r3, #15
			STR		R3, [R10, #12]
  10:	e58a300c 	str	r3, [r10, #12]

00000014 <MAINLOOP>:
MAINLOOP:	LDRB	R2, [R10]
  14:	e5da2000 	ldrb	r2, [r10]
			LDRB	R3, [R10, #12]
  18:	e5da300c 	ldrb	r3, [r10, #12]
			
			CMP		R3, #0
  1c:	e3530000 	cmp	r3, #0
			BNE		PAUSE
  20:	1a000009 	bne	4c <PAUSE>
			
			ADD		R6, #1
  24:	e2866001 	add	r6, r6, #1
			CMP		R6, #100
  28:	e3560064 	cmp	r6, #100	; 0x64
			BEQ		SETZERO
  2c:	0a000004 	beq	44 <SETZERO>
						
			B		DO_DELAY
  30:	ea00000d 	b	6c <DO_DELAY>

00000034 <WAIT>:
			
WAIT:		LDRB	R2, [R10]
  34:	e5da2000 	ldrb	r2, [r10]
			CMP		R2, #0
  38:	e3520000 	cmp	r2, #0
			BEQ		PRELOOP
  3c:	0afffff1 	beq	8 <PRELOOP>
			B		WAIT
  40:	eafffffb 	b	34 <WAIT>

00000044 <SETZERO>:
			
SETZERO:	MOV		R6, #0
  44:	e3a06000 	mov	r6, #0
			B		DISPLAY
  48:	ea000012 	b	98 <DISPLAY>

0000004c <PAUSE>:
			
PAUSE:		LDRB	R2, [R10]
  4c:	e5da2000 	ldrb	r2, [r10]
			LDRB	R3, [R10, #12]
  50:	e5da300c 	ldrb	r3, [r10, #12]
			MOV		R12, #0
  54:	e3a0c000 	mov	r12, #0
			MOV		R3, #15
  58:	e3a0300f 	mov	r3, #15
			
			STR		R3, [R10, #12]
  5c:	e58a300c 	str	r3, [r10, #12]
			CMP		R2, #0
  60:	e3520000 	cmp	r2, #0
			BEQ		PAUSE
  64:	0afffff8 	beq	4c <PAUSE>
			B		WAIT
  68:	eafffff1 	b	34 <WAIT>

0000006c <DO_DELAY>:
			
DO_DELAY: 	LDR	 	R7, =0xFFFEC600  	// delay counter 
  6c:	e59f7098 	ldr	r7, [pc, #152]	; 10c <BIT_CODES+0x14>
			LDR		R0, =50000000
  70:	e59f0098 	ldr	r0, [pc, #152]	; 110 <BIT_CODES+0x18>
			STR		R0, [R7]
  74:	e5870000 	str	r0, [r7]
			MOV		R0, #0b00000101
  78:	e3a00005 	mov	r0, #5
			STR		R0, [R7, #8]
  7c:	e5870008 	str	r0, [r7, #8]
			MOV		R0, #0b00000001
  80:	e3a00001 	mov	r0, #1
			STR		R0, [R7, #12]
  84:	e587000c 	str	r0, [r7, #12]

00000088 <SUB_LOOP>:
SUB_LOOP: 	LDR		R0, [R7, #12]
  88:	e597000c 	ldr	r0, [r7, #12]
			CMP		R0, #0b00000001
  8c:	e3500001 	cmp	r0, #1
			BNE SUB_LOOP
  90:	1afffffc 	bne	88 <SUB_LOOP>
			B DISPLAY
  94:	eaffffff 	b	98 <DISPLAY>

00000098 <DISPLAY>:


/* Display R5 on HEX1-0*/
DISPLAY:    LDR     R3, =0xFF200020 // base address of HEX3-HEX0
  98:	e59f3074 	ldr	r3, [pc, #116]	; 114 <BIT_CODES+0x1c>
            MOV     R0, R6          // display R5 on HEX1-0
  9c:	e1a00006 	mov	r0, r6
            BL      DIVIDE          // ones digit will be in R0; tens
  a0:	eb00000c 	bl	d8 <DIVIDE>
                                    // digit in R1
            MOV     R9, R1          // save the tens digit
  a4:	e1a09001 	mov	r9, r1
            BL      SEG7_CODE       
  a8:	eb000006 	bl	c8 <SEG7_CODE>
            MOV     R4, R0          // save bit code
  ac:	e1a04000 	mov	r4, r0
            MOV     R0, R9          // retrieve the tens digit, get bit
  b0:	e1a00009 	mov	r0, r9
                                    // code
            BL      SEG7_CODE       
  b4:	eb000003 	bl	c8 <SEG7_CODE>
            LSL     R0, #8
  b8:	e1a00400 	lsl	r0, r0, #8
            ORR     R4, R0     
  bc:	e1844000 	orr	r4, r4, r0
			
			STR     R4, [R3]        // display the number from R7
  c0:	e5834000 	str	r4, [r3]
			B		MAINLOOP
  c4:	eaffffd2 	b	14 <MAINLOOP>

000000c8 <SEG7_CODE>:

			
SEG7_CODE:  MOV     R11, #BIT_CODES  
  c8:	e3a0b0f8 	mov	r11, #248	; 0xf8
            ADD     R11, R0         // index into the BIT_CODES "array"
  cc:	e08bb000 	add	r11, r11, r0
			LDRB    R0, [R11]       // load the bit pattern (to be returned)
  d0:	e5db0000 	ldrb	r0, [r11]
            MOV     PC, LR              
  d4:	e1a0f00e 	mov	pc, lr

000000d8 <DIVIDE>:

DIVIDE:   	MOV    	R2, #0			// Setting the quotients to zero
  d8:	e3a02000 	mov	r2, #0

000000dc <DTEN>:
DTEN:       CMP    	R0, #10			// Checking if the value is greater than the Divisor to the Second power
  dc:	e350000a 	cmp	r0, #10
            BLT    	DIV_END			// Moving to the next function if Divisor is greater than the remaining value
  e0:	ba000002 	blt	f0 <DIV_END>
            SUB    	R0, #10			// Subtracting the divisor from the remaining value
  e4:	e240000a 	sub	r0, r0, #10
            ADD    	R2, #1			// incrementing Tens value for each time through the full function
  e8:	e2822001 	add	r2, r2, #1
            B      	DTEN			// going back to beginning of function
  ec:	eafffffa 	b	dc <DTEN>

000000f0 <DIV_END>:
DIV_END:    MOV    	R1, R2       	// quotient in R1 (remainder in R0)
  f0:	e1a01002 	mov	r1, r2
            MOV    	PC, LR
  f4:	e1a0f00e 	mov	pc, lr

000000f8 <BIT_CODES>:
  f8:	4f5b063f 	.word	0x4f5b063f
  fc:	077d6d66 	.word	0x077d6d66
 100:	0000677f 	.word	0x0000677f
 104:	00000000 	.word	0x00000000
 108:	ff200050 	.word	0xff200050
 10c:	fffec600 	.word	0xfffec600
 110:	02faf080 	.word	0x02faf080
 114:	ff200020 	.word	0xff200020

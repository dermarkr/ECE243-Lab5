
D:/ECE243_Computer_Organization/Labs/Lab_5/Part4/part4.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
			.text			// executable code follows
			.global _start
_start:
			MOV		R6, #0			//Number to display		
   0:	e3a06000 	mov	r6, #0
			MOV		R12, #0
   4:	e3a0c000 	mov	r12, #0
			LDR		R10, =0xFF200050
   8:	e59fa134 	ldr	r10, [pc, #308]	; 144 <BIT_CODES+0x10>

0000000c <PRELOOP>:

PRELOOP:	LDRB	R3, [R10, #12]
   c:	e5da300c 	ldrb	r3, [r10, #12]
			MOV		R3, #15
  10:	e3a0300f 	mov	r3, #15
			STR		R3, [R10, #12]
  14:	e58a300c 	str	r3, [r10, #12]

00000018 <MAINLOOP>:
MAINLOOP:	LDRB	R2, [R10]
  18:	e5da2000 	ldrb	r2, [r10]
			LDRB	R3, [R10, #12]
  1c:	e5da300c 	ldrb	r3, [r10, #12]
			
			CMP		R3, #0
  20:	e3530000 	cmp	r3, #0
			BNE		PAUSE
  24:	1a00000e 	bne	64 <PAUSE>
			
			ADD		R6, #1
  28:	e2866001 	add	r6, r6, #1
			CMP		R6, #100
  2c:	e3560064 	cmp	r6, #100	; 0x64
			BEQ		SETZERO1
  30:	0a000004 	beq	48 <SETZERO1>
			
						
			B		DO_DELAY
  34:	ea000011 	b	80 <DO_DELAY>

00000038 <WAIT>:
			
WAIT:		LDRB	R2, [R10]
  38:	e5da2000 	ldrb	r2, [r10]
			CMP		R2, #0
  3c:	e3520000 	cmp	r2, #0
			BEQ		PRELOOP
  40:	0afffff1 	beq	c <PRELOOP>
			B		WAIT
  44:	eafffffb 	b	38 <WAIT>

00000048 <SETZERO1>:
			
SETZERO1:	MOV		R6, #0
  48:	e3a06000 	mov	r6, #0
			ADD		R12, #1
  4c:	e28cc001 	add	r12, r12, #1
			CMP		R12, #60
  50:	e35c003c 	cmp	r12, #60	; 0x3c
			BEQ		SETZERO2
  54:	0a000000 	beq	5c <SETZERO2>
			B		DO_DELAY
  58:	ea000008 	b	80 <DO_DELAY>

0000005c <SETZERO2>:
			
SETZERO2:	MOV		R12, #0
  5c:	e3a0c000 	mov	r12, #0
			B		DO_DELAY
  60:	ea000006 	b	80 <DO_DELAY>

00000064 <PAUSE>:
			
PAUSE:		LDRB	R2, [R10]
  64:	e5da2000 	ldrb	r2, [r10]
			LDRB	R3, [R10, #12]
  68:	e5da300c 	ldrb	r3, [r10, #12]
			MOV		R3, #15
  6c:	e3a0300f 	mov	r3, #15
			
			STR		R3, [R10, #12]
  70:	e58a300c 	str	r3, [r10, #12]
			CMP		R2, #0
  74:	e3520000 	cmp	r2, #0
			BEQ		PAUSE
  78:	0afffff9 	beq	64 <PAUSE>
			B		WAIT
  7c:	eaffffed 	b	38 <WAIT>

00000080 <DO_DELAY>:
			
DO_DELAY: 	LDR	 	R7, =0xFFFEC600  	// delay counter 
  80:	e59f70c0 	ldr	r7, [pc, #192]	; 148 <BIT_CODES+0x14>
			LDR		R0, =2000000
  84:	e59f00c0 	ldr	r0, [pc, #192]	; 14c <BIT_CODES+0x18>
			STR		R0, [R7]
  88:	e5870000 	str	r0, [r7]
			MOV		R0, #0b00000101
  8c:	e3a00005 	mov	r0, #5
			STR		R0, [R7, #8]
  90:	e5870008 	str	r0, [r7, #8]
			MOV		R0, #0b00000001
  94:	e3a00001 	mov	r0, #1
			STR		R0, [R7, #12]
  98:	e587000c 	str	r0, [r7, #12]

0000009c <SUB_LOOP>:
SUB_LOOP: 	LDR		R0, [R7, #12]
  9c:	e597000c 	ldr	r0, [r7, #12]
			CMP		R0, #0b00000001
  a0:	e3500001 	cmp	r0, #1
			BNE SUB_LOOP
  a4:	1afffffc 	bne	9c <SUB_LOOP>
			B DISPLAY
  a8:	eaffffff 	b	ac <DISPLAY>

000000ac <DISPLAY>:


/* Display R5 on HEX1-0*/
DISPLAY:    LDR     R3, =0xFF200020 // base address of HEX3-HEX0
  ac:	e59f309c 	ldr	r3, [pc, #156]	; 150 <BIT_CODES+0x1c>
            MOV     R0, R6          // display R5 on HEX1-0
  b0:	e1a00006 	mov	r0, r6
            BL      DIVIDE          // ones digit will be in R0; tens
  b4:	eb000016 	bl	114 <DIVIDE>
                                    // digit in R1
            MOV     R9, R1          // save the tens digit
  b8:	e1a09001 	mov	r9, r1
            BL      SEG7_CODE       
  bc:	eb000010 	bl	104 <SEG7_CODE>
            MOV     R4, R0          // save bit code
  c0:	e1a04000 	mov	r4, r0
            MOV     R0, R9          // retrieve the tens digit, get bit
  c4:	e1a00009 	mov	r0, r9
                                    // code
            BL      SEG7_CODE       
  c8:	eb00000d 	bl	104 <SEG7_CODE>
            LSL     R0, #8
  cc:	e1a00400 	lsl	r0, r0, #8
            ORR     R4, R0
  d0:	e1844000 	orr	r4, r4, r0

			MOV		R0, R12
  d4:	e1a0000c 	mov	r0, r12
			BL		DIVIDE
  d8:	eb00000d 	bl	114 <DIVIDE>
			
			MOV     R9, R1          // save the tens digit
  dc:	e1a09001 	mov	r9, r1
            BL      SEG7_CODE       
  e0:	eb000007 	bl	104 <SEG7_CODE>
            LSL     R0, #16
  e4:	e1a00800 	lsl	r0, r0, #16
            ORR     R4, R0
  e8:	e1844000 	orr	r4, r4, r0
            MOV     R0, R9          // retrieve the tens digit, get bit
  ec:	e1a00009 	mov	r0, r9
                                    // code
            BL      SEG7_CODE       
  f0:	eb000003 	bl	104 <SEG7_CODE>
            LSL     R0, #24
  f4:	e1a00c00 	lsl	r0, r0, #24
            ORR     R4, R0
  f8:	e1844000 	orr	r4, r4, r0
			
			STR     R4, [R3]        // display the number from R7
  fc:	e5834000 	str	r4, [r3]
			B		MAINLOOP
 100:	eaffffc4 	b	18 <MAINLOOP>

00000104 <SEG7_CODE>:

			
SEG7_CODE:  MOV     R11, #BIT_CODES  
 104:	e3a0bf4d 	mov	r11, #308	; 0x134
            ADD     R11, R0         // index into the BIT_CODES "array"
 108:	e08bb000 	add	r11, r11, r0
			LDRB    R0, [R11]       // load the bit pattern (to be returned)
 10c:	e5db0000 	ldrb	r0, [r11]
            MOV     PC, LR              
 110:	e1a0f00e 	mov	pc, lr

00000114 <DIVIDE>:

DIVIDE:   	MOV    	R2, #0			// Setting the quotients to zero
 114:	e3a02000 	mov	r2, #0

00000118 <DTEN>:
DTEN:       CMP    	R0, #10			// Checking if the value is greater than the Divisor to the Second power
 118:	e350000a 	cmp	r0, #10
            BLT    	DIV_END			// Moving to the next function if Divisor is greater than the remaining value
 11c:	ba000002 	blt	12c <DIV_END>
            SUB    	R0, #10			// Subtracting the divisor from the remaining value
 120:	e240000a 	sub	r0, r0, #10
            ADD    	R2, #1			// incrementing Tens value for each time through the full function
 124:	e2822001 	add	r2, r2, #1
            B      	DTEN			// going back to beginning of function
 128:	eafffffa 	b	118 <DTEN>

0000012c <DIV_END>:
DIV_END:    MOV    	R1, R2       	// quotient in R1 (remainder in R0)
 12c:	e1a01002 	mov	r1, r2
            MOV    	PC, LR
 130:	e1a0f00e 	mov	pc, lr

00000134 <BIT_CODES>:
 134:	4f5b063f 	.word	0x4f5b063f
 138:	077d6d66 	.word	0x077d6d66
 13c:	0000677f 	.word	0x0000677f
 140:	00000000 	.word	0x00000000
 144:	ff200050 	.word	0xff200050
 148:	fffec600 	.word	0xfffec600
 14c:	001e8480 	.word	0x001e8480
 150:	ff200020 	.word	0xff200020
